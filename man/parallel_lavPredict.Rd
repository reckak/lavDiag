% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parallel_lavPredict.R
\name{parallel_lavPredict}
\alias{parallel_lavPredict}
\title{Parallelized lavPredict for Ordinal Models}
\usage{
parallel_lavPredict(
  object,
  newdata = NULL,
  chunk_size = 100L,
  cores = parallel::detectCores() - 1L,
  by_group = TRUE,
  ...
)
}
\arguments{
\item{object}{A fitted lavaan object}

\item{newdata}{Optional data.frame with new data for prediction. If NULL,
uses the original model data.}

\item{chunk_size}{Integer. Number of rows per chunk for parallel processing.
Default is 100.}

\item{cores}{Integer. Number of cores to use for parallel processing.
Default is parallel::detectCores() - 1.}

\item{by_group}{Logical. For multi-group models, whether to chunk within
each group separately (TRUE) or across all groups (FALSE). Default is TRUE.}

\item{...}{Additional arguments passed to lavaan::lavPredict}
}
\value{
Predictions in the same format as lavaan::lavPredict
}
\description{
A parallelized version of lavaan::lavPredict optimized for models with ordinal
variables. Supports both single-group and multi-group models.
}
\details{
This function addresses the challenge of using lavPredict with ordinal variables
in parallel processing by ensuring each chunk contains all levels of ordinal
variables through dummy rows.

For multi-group models, two strategies are available:
\itemize{
\item by_group = TRUE: Process each group separately (recommended for groups
with different ordinal levels)
\item by_group = FALSE: Process all groups together (faster for similar groups)
}
}
\examples{
\dontrun{
# Single group model
predictions <- parallel_lavPredict(fit, chunk_size = 100)

# Multi-group model
predictions <- parallel_lavPredict(fit_mg, by_group = TRUE)
}

}
