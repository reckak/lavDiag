out <- out %>%
list()
out
lavPredict(fit3, assemble = FALSE, append.data = TRUE)
# 2) Split data into chunks (by rows) — or by groups for multi-group models
group_var  <- tryCatch(lavaan::lavInspect(fit3, "group"), error = function(e) NULL)
ov_ord <- lavNames(fit3, "ov.ord")
dat <- lavInspect(fit3, "data") %>%
map(as_tibble)
group_labels  <- tryCatch(lavaan::lavInspect(fit3, "group.label"), error = function(e) NULL)
dat <- dat %>%
bind_rows(.id = group_var)
create_dummy <- function(data) {
values <- data %>%
map(unique_valid)
longest <- values %>%
map_int(length) %>%
max()
values %>%
map(rep_len,
length.out = longest) %>%
bind_cols()
}
dummy <- dat %>%
create_dummy()
n_chunks <- 10
n_rows <- nrow(dat)
n <- n_rows / n_chunks
idx_list <- split(seq_len(n_rows),
ceiling(seq_along(seq_len(n_rows))/n))
chunked <- vector("list", length = length(idx_list))
for (i in seq_along(idx_list)) {
chunked[[i]] <- dat[idx_list[[i]], , drop = FALSE]
}
chunked
chunked <- chunked %>%
future_map(~bind_rows(dummy, .x))
out <- chunked %>%
future_map(~lavPredict(fit3, newdata = .x,
append.data = TRUE,
assemble = T,
drop.list.single.group = FALSE))
dummy_rows <- nrow(dummy)
out <- out %>%
future_map(as_tibble) %>%
future_map(~slice(.x, -(1:dummy_rows))) %>%
bind_rows()
out
out %>%
split(out[[group_var]])
out
group_col <- out[[group_var]]
out[[group_var]] <- NULL
out
split(out, group_col)
out <- split(out, group_col)
out
out
# 2) Split data into chunks (by rows) — or by groups for multi-group models
group_var  <- tryCatch(lavaan::lavInspect(fit3, "group"), error = function(e) NULL)
ov_ord <- lavNames(fit3, "ov.ord")
dat <- lavInspect(fit3, "data") %>%
map(as_tibble)
group_labels  <- tryCatch(lavaan::lavInspect(fit3, "group.label"), error = function(e) NULL)
dat <- dat %>%
bind_rows(.id = group_var)
create_dummy <- function(data) {
values <- data %>%
map(unique_valid)
longest <- values %>%
map_int(length) %>%
max()
values %>%
map(rep_len,
length.out = longest) %>%
bind_cols()
}
dummy <- dat %>%
create_dummy()
n_chunks <- 10
n_rows <- nrow(dat)
n <- n_rows / n_chunks
idx_list <- split(seq_len(n_rows),
ceiling(seq_along(seq_len(n_rows))/n))
chunked <- vector("list", length = length(idx_list))
for (i in seq_along(idx_list)) {
chunked[[i]] <- dat[idx_list[[i]], , drop = FALSE]
}
chunked
chunked <- chunked %>%
future_map(~bind_rows(dummy, .x))
out <- chunked %>%
future_map(~lavPredict(fit3, newdata = .x,
append.data = TRUE,
assemble = T,
drop.list.single.group = FALSE))
dummy_rows <- nrow(dummy)
out <- out %>%
future_map(as_tibble) %>%
future_map(~slice(.x, -(1:dummy_rows))) %>%
bind_rows()
group_col <- out[[group_var]]
out[[group_var]] <- NULL
out
out %>% as.lavan.matrix()
out
split(out, group_col)
fit1 <-lavaan::cfa(model = m,
data = df,
# missing = "ml",
meanstructure = T,
ordered = F)
augment(fit1)
load_all()
augment(fit1)
# 2) Split data into chunks (by rows) — or by groups for multi-group models
dat <- lavInspect(fit1, "data") %>%
as.data.frame()
ov_ord <- lavNames(fit1, "ov.ord")
n_chunks <- 10
n_rows <- nrow(dat)
n <- n_rows / n_chunks
idx_list <- split(seq_len(n_rows),
ceiling(seq_along(seq_len(n_rows))/n))
chunked <- vector("list", length = length(idx_list))
for (i in seq_along(idx_list)) {
chunked[[i]] <- dat[idx_list[[i]], , drop = FALSE]
}
str(chunked)
dat %>%
create_dummy()
dummy <- dat %>%
create_dummy()
chunked <- chunked %>%
future_map(~bind_rows(dummy, .x))
out <- chunked %>%
future_map(~lavPredict(fit1, newdata = .x,
append.data = TRUE,
assemble = TRUE))
out
seq(dummy_rows)
out
for (i in seq_along(out)) {
out[[i]] <- out[[i]][-c(seq(dummy_rows)) , ]
}
out
out %>%
bind_rows()
out <- out %>%
future_map(as_tibble) %>%
bind_rows()
out <- out %>%
list()
# 2) Split data into chunks (by rows) — or by groups for multi-group models
dat <- lavInspect(fit1, "data") %>%
as.data.frame()
ov_ord <- lavNames(fit1, "ov.ord")
n_chunks <- 10
n_rows <- nrow(dat)
n <- n_rows / n_chunks
idx_list <- split(seq_len(n_rows),
ceiling(seq_along(seq_len(n_rows))/n))
chunked <- vector("list", length = length(idx_list))
for (i in seq_along(idx_list)) {
chunked[[i]] <- dat[idx_list[[i]], , drop = FALSE]
}
str(chunked)
dummy <- dat %>%
create_dummy()
chunked <- chunked %>%
future_map(~bind_rows(dummy, .x))
out <- chunked %>%
future_map(~lavPredict(fit1, newdata = .x,
append.data = TRUE,
assemble = TRUE))
dummy_rows <- nrow(dummy)
seq(dummy_rows)
for (i in seq_along(out)) {
out[[i]] <- out[[i]][-c(seq(dummy_rows)) , ]
}
out <- out %>%
future_map(as_tibble) %>%
bind_rows() %>%
list()
out
# 2) Split data into chunks (by rows) — or by groups for multi-group models
dat <- lavInspect(fit1, "data") %>%
as.data.frame()
ov_ord <- lavNames(fit1, "ov.ord")
n_chunks <- 10
n_rows <- nrow(dat)
n <- n_rows / n_chunks
idx_list <- split(seq_len(n_rows),
ceiling(seq_along(seq_len(n_rows))/n))
chunked <- vector("list", length = length(idx_list))
for (i in seq_along(idx_list)) {
chunked[[i]] <- dat[idx_list[[i]], , drop = FALSE]
}
str(chunked)
dummy <- dat %>%
create_dummy()
chunked <- chunked %>%
future_map(~bind_rows(dummy, .x))
out <- chunked %>%
future_map(~lavPredict(fit1, newdata = .x,
append.data = TRUE,
assemble = TRUE))
dummy_rows <- nrow(dummy)
seq(dummy_rows)
for (i in seq_along(out)) {
out[[i]] <- out[[i]][-c(seq(dummy_rows)) , ]
}
do.call(rbind, out)
# 2) Split data into chunks (by rows) — or by groups for multi-group models
group_var  <- tryCatch(lavaan::lavInspect(fit3, "group"), error = function(e) NULL)
ov_ord <- lavNames(fit3, "ov.ord")
dat <- lavInspect(fit3, "data") %>%
map(as_tibble)
dat
dat <- lavInspect(fit3, "data")
dat
do.call(rbind, out)
# 2) Split data into chunks (by rows) — or by groups for multi-group models
dat <- lavInspect(fit1, "data") %>%
as.data.frame()
dat
dat %>% create_dummy()
dat <- lavInspect(fit1, "data")
dat %>% create_dummy()
# 2) Split data into chunks (by rows) — or by groups for multi-group models
dat <- lavInspect(fit1, "data") %>%
as.data.frame()
ov_ord <- lavNames(fit1, "ov.ord")
# 2) Split data into chunks (by rows) — or by groups for multi-group models
dat <- lavInspect(fit1, "data") %>%
as.data.frame()
ov_ord <- lavNames(fit1, "ov.ord")
n_chunks <- 10
n_rows <- nrow(dat)
n <- n_rows / n_chunks
idx_list <- split(seq_len(n_rows),
ceiling(seq_along(seq_len(n_rows))/n))
chunked <- vector("list", length = length(idx_list))
for (i in seq_along(idx_list)) {
chunked[[i]] <- dat[idx_list[[i]], , drop = FALSE]
}
dummy <- dat %>%
create_dummy()
dummy
dummy <- dat %>%
create_dummy()
chunked <- chunked %>%
future_map(~bind_rows(dummy, .x))
out <- chunked %>%
future_map(~lavPredict(fit1, newdata = .x,
append.data = TRUE,
assemble = TRUE))
dummy_rows <- nrow(dummy)
seq(dummy_rows)
for (i in seq_along(out)) {
out[[i]] <- out[[i]][-c(seq(dummy_rows)) , ]
}
do.call(rbind, out)
# 2) Split data into chunks (by rows) — or by groups for multi-group models
group_var  <- tryCatch(lavaan::lavInspect(fit3, "group"), error = function(e) NULL)
ov_ord <- lavNames(fit3, "ov.ord")
dat <- lavInspect(fit3, "data") %>%
map(as_tibble)
dat
do.call(rbind, out)
list(
do.call(rbind, out)
)
# 2) Split data into chunks (by rows) — or by groups for multi-group models
group_var  <- tryCatch(lavaan::lavInspect(fit3, "group"), error = function(e) NULL)
ov_ord <- lavNames(fit3, "ov.ord")
dat <- lavInspect(fit3, "data") %>%
map(as_tibble)
group_labels  <- tryCatch(lavaan::lavInspect(fit3, "group.label"), error = function(e) NULL)
dat <- dat %>%
bind_rows(.id = group_var)
create_dummy <- function(data) {
values <- data %>%
map(unique_valid)
longest <- values %>%
map_int(length) %>%
max()
values %>%
map(rep_len,
length.out = longest) %>%
bind_cols()
}
dummy <- dat %>%
create_dummy()
dummy
dat
n_chunks <- 10
n_rows <- nrow(dat)
n <- n_rows / n_chunks
idx_list <- split(seq_len(n_rows),
ceiling(seq_along(seq_len(n_rows))/n))
chunked <- vector("list", length = length(idx_list))
for (i in seq_along(idx_list)) {
chunked[[i]] <- dat[idx_list[[i]], , drop = FALSE]
}
chunked
chunked <- chunked %>%
future_map(~bind_rows(dummy, .x))
out <- chunked %>%
future_map(~lavPredict(fit3, newdata = .x,
append.data = TRUE,
assemble = TRUE,
drop.list.single.group = FALSE))
out
dummy_rows <- nrow(dummy)
for (i in seq_along(out)) {
out[[i]] <- out[[i]][-c(seq(dummy_rows)) , ]
}
out
do.call(rbind, out)
out <- do.call(rbind, out)
out
group_var
out[, group_var]
group_col <- out[, group_var]
group_col
out
out[, group_var] <- NULL
out
split(out, group_col)
group_col
?v
?split
group_col
split(out, group_col)
split(out, group_col, lex.order = FALSE)
group_col
split(out, group_col, lex.order = FALSE)
out[group_labels]
group_labels
out
out
out <- split(out, group_col, lex.order = FALSE)
out
out[group_labels]
augment2(fit1)
augment2(fit1) %>%
view()
fit1 <-lavaan::cfa(model = m,
data = df,
# missing = "ml",
meanstructure = T,
ordered = F)
augment2(fit1)
augment2(fit1) %>%
view()
augment(fit1) %>%
view()
augment(fit1) %>%
view()
augment2(fit1) %>%
view()
load_all()
augment2(fit1) %>%
view()
load_all()
augment2(fit1) %>%
view()
fit1 <-lavaan::cfa(model = m,
data = df,
# missing = "ml",
meanstructure = T,
ordered = F)
augment2(fit1) %>%
view()
fit1 <-lavaan::cfa(model = m,
data = df,
missing = "ml",
meanstructure = T,
ordered = F)
augment2(fit1) %>%
view()
fit3 <- lavaan::cfa(model = m,
data = df,
meanstructure = T,
missing = "pairwise",
group = "gender",
ordered = F)
augment2(fit3) %>%
view()
load_all()
augment2(fit3) %>%
view()
augment2(fit1) %>%
view()
load_all()
augment2(fit1) %>%
view()
load_all()
augment2(fit1) %>%
view()
fit3 <- lavaan::cfa(model = m,
data = df,
meanstructure = T,
missing = "pairwise",
group = "gender",
ordered = F)
augment2(fit3) %>%
view()
fit3 <- lavaan::cfa(model = m,
data = df,
meanstructure = T,
missing = "pairwise",
group = "gender",
ordered = F)
augment2(fit3) %>%
view()
augment2(fit3) %>%
view()
fit3 <- lavaan::cfa(model = m,
data = df,
meanstructure = T,
missing = "ml",
group = "gender",
ordered = F)
augment2(fit3) %>%
view()
load_all()
augment2(fit3) %>%
view()
load_all()
fit3 <- lavaan::cfa(model = m,
data = df,
meanstructure = T,
missing = "ml",
group = "gender",
ordered = F)
augment2(fit3) %>%
view()
augment2(fit3, ci = "delta") %>%
view()
augment2(fit1, ci = "delta") %>%
view()
load_all()
fit1 <-lavaan::cfa(model = m,
data = df,
#missing = "ml",
meanstructure = T,
ordered = T)
augment3(fit1) %>%
view()
load_all()
augment3(fit1) %>%
view()
load_all()
augment3(fit1) %>%
view()
augment3(fit3) %>%
view()
fit3 <- lavaan::cfa(model = m,
data = df,
meanstructure = T,
missing = "ml",
group = "gender",
ordered = F)
augment3(fit3) %>%
view()
fit3 <- lavaan::cfa(model = m,
data = df,
meanstructure = T,
missing = "pairwise",
group = "gender",
ordered = T)
augment3(fit3) %>%
view()
document()
check()
check()
load_all()
augment3(fit1) %>%
view()
load_all()
augment3(fit1) %>%
view()
augment3(fit3) %>%
view()
augment3(fit3) %>%
view()
load_all()
augment3(fit1) %>%
view()
load_all()
augment3(fit1) %>%
view()
0.21 + 0.27 + 0.16 + 0.16. + 0.12
0.21 + 0.27 + 0.16 + 0.16 + 0.12
0.21305196 +
0.2740764+
0.16282512+
0.15896648+
0.12879799+
0.062282027
augment3(fit3) %>%
view()
0.15812974 +
0.2797540+
0.1819159+
0.17651211+
0.14383743+
0.059850781
augment3(fit3) %>%
view()
