chunked[[i]] <- dat[idx_list[[i]], , drop = FALSE]
}
unique_valid <- function(x){
out <- unique(x)
out[!is.na(out)]
}
dummy <- dat %>%
select(all_of(ov_ord)) %>%
future_map(unique_valid) %>%
bind_cols() %>%
tidyr::fill(everything(), .direction = "downup")
chunked <- chunked %>%
future_map(~bind_rows(dummy, .x))
out <- chunked %>%
future_map(~lavPredict(fit1, newdata = .x,
append.data = TRUE))
out
n_rows <- nrow(dummy)
out <- out %>%
future_map(as_tibble) %>%
future_map(~slice(.x, -(1:n_rows))) %>%
bind_rows()
out <- out %>%
mutate(
across(everything(), as.double)
)
out
# 2) Split data into chunks (by rows) — or by groups for multi-group models
group_var  <- tryCatch(lavaan::lavInspect(fit3, "group"), error = function(e) NULL)
ov_ord <- lavNames(fit3, "ov.ord")
dat <- lavInspect(fit3, "data") %>%
map(as_tibble)
dummy <- dat %>%
map(
~(.x %>%
select(all_of(ov_ord)) %>%
future_map(unique_valid) %>%
bind_cols() %>%
tidyr::fill(everything(), .direction = "downup"))
)
dummy
dat
dat
dat
split_data <- function(data, n_chunks = 10) {
n_rows <- nrow(dat)
n <- n_rows / n_chunks
idx_list <- split(seq_len(nrow(dat)),
ceiling(seq_along(seq_len(nrow(dat)))/n))
chunked <- vector("list", length = length(idx_list))
for (i in seq_along(idx_list)) {
chunked[[i]] <- data[idx_list[[i]], , drop = FALSE]
}
return(chunked)
}
dat
split_data(dat[[1]])
split_data <- function(data, n_chunks = 10) {
n_rows <- nrow(data)
n <- n_rows / n_chunks
idx_list <- split(seq_len(nrow(dat)),
ceiling(seq_along(seq_len(nrow(dat)))/n))
chunked <- vector("list", length = length(idx_list))
for (i in seq_along(idx_list)) {
chunked[[i]] <- data[idx_list[[i]], , drop = FALSE]
}
return(chunked)
}
split_data(dat[[1]])
dat[[1]]
split_data(dat[[2]])
split_data <- function(data, n_chunks = 10) {
n_rows <- nrow(data)
n <- n_rows / n_chunks
idx_list <- split(seq_len(nrow(dat)),
ceiling(seq_along(seq_len(n_rows))/n))
chunked <- vector("list", length = length(idx_list))
for (i in seq_along(idx_list)) {
chunked[[i]] <- data[idx_list[[i]], , drop = FALSE]
}
return(chunked)
}
split_data(dat[[2]])
dat[[2]]
split_data <- function(data, n_chunks = 10) {
n_rows <- nrow(data)
n <- n_rows / n_chunks
idx_list <- split(seq_len(nrow(dat)),
ceiling(seq_along(seq_len(n_rows))/n))
}
split_data(dat[[2]])
split_data <- function(data, n_chunks = 10) {
n_rows <- nrow(data)
n <- n_rows / n_chunks
idx_list <- split(seq_len(n_rows),
ceiling(seq_along(seq_len(n_rows))/n))
chunked <- vector("list", length = length(idx_list))
for (i in seq_along(idx_list)) {
chunked[[i]] <- data[idx_list[[i]], , drop = FALSE]
}
return(chunked)
}
split_data(dat[[2]])
split_data <- function(data, n_chunks = 10) {
n_rows <- nrow(data)
n <- n_rows / n_chunks
idx_list <- split(seq_len(n_rows),
ceiling(seq_along(seq_len(n_rows))/n))
chunked <- vector("list", length = length(idx_list))
for (i in seq_along(idx_list)) {
chunked[[i]] <- data[idx_list[[i]], , drop = FALSE]
}
return(chunked)
}
dat
dat %>%
map(split_data)
dummy
str(dummy)
dat %>%
map(split_data)
dat %>%
map(split_data) %>%
str()
dat
dat %>%
map(split_data)
dummy
dat <- dat %>%
map(split_data)
seq_along(dat)
print(i)
for (i in seq_along(dat)) {
print(i)
}
print(dat[[i]])
for (i in seq_along(dat)) {
print(dat[[i]])
}
dat
dat
dat[[1]]
dat[[2]]
map_depth(dat)
map_depth(dat, .depth = 2)
map_depth(dat, .depth = 2, print)
map_depth(dat, .depth = 1, print)
dat
?map_depth
dat %>%
map(length)
# 2) Split data into chunks (by rows) — or by groups for multi-group models
group_var  <- tryCatch(lavaan::lavInspect(fit3, "group"), error = function(e) NULL)
group_labs  <- tryCatch(lavaan::lavInspect(fit3, "groups"), error = function(e) NULL)
group_labs
lavaan::lavInspect(fit3, "groups")
?lavInspect
group_labels  <- tryCatch(lavaan::lavInspect(fit3, "group.label"), error = function(e) NULL)
group_labels
for (group in group_labels) {
print(group)
}
for (group in group_labels) {
dat[[group]]
}
str(dat[[group]])
print(group)
for (group in group_labels) {
print(group)
}
for (group in group_labels) {
print(group)
}
for (group in group_labels) {
dat[[group]]
}
for (group in group_labels) {
str(dat[[group]])
}
df
for (group in group_labels) {
d <- dat[[group]]
}
d
dummy
chunk
group_labels  <- tryCatch(lavaan::lavInspect(fit3, "group.label"), error = function(e) NULL)
out <- vector("list", length = length(group_labels)) %>%
set_names(group_labels)
out
out <- vector("list", length = length(group_labels)) %>%
set_names(group_labels)
for (group in group_labels) {
chunks <- dat[[group]]
padding <- dummy[[group]]
for (i in seq_along(chunks)) {
out[[group]][[i]] <- bind_rows(padding, chunks[[i]])
}
}
out
dat
out
dat
# 2) Split data into chunks (by rows) — or by groups for multi-group models
group_var  <- tryCatch(lavaan::lavInspect(fit3, "group"), error = function(e) NULL)
ov_ord <- lavNames(fit3, "ov.ord")
dat <- lavInspect(fit3, "data") %>%
map(as_tibble)
dat
group_var
dat
dat
group_var  <- tryCatch(lavaan::lavInspect(fit3, "group"), error = function(e) NULL)
ov_ord <- lavNames(fit3, "ov.ord")
dat <- lavInspect(fit3, "data") %>%
map(as_tibble)
dat
dummy <- dat %>%
map(
~(.x %>%
select(all_of(ov_ord)) %>%
future_map(unique_valid) %>%
bind_cols() %>%
tidyr::fill(everything(), .direction = "downup"))
)
n_chunks <- 10
ov_ord <- lavNames(fit1, "ov.ord")
n_rows <- nrow(dat)
n <- n_rows / n_chunks
idx_list <- split(seq_len(nrow(dat)),
ceiling(seq_along(seq_len(nrow(dat)))/n))
# 2) Split data into chunks (by rows) — or by groups for multi-group models
group_var  <- tryCatch(lavaan::lavInspect(fit3, "group"), error = function(e) NULL)
ov_ord <- lavNames(fit3, "ov.ord")
dat <- lavInspect(fit3, "data") %>%
map(as_tibble)
dat
dummy <- dat %>%
map(
~(.x %>%
select(all_of(ov_ord)) %>%
future_map(unique_valid) %>%
bind_cols() %>%
tidyr::fill(everything(), .direction = "downup"))
)
n_chunks <- 10
ov_ord <- lavNames(fit1, "ov.ord")
n_rows <- nrow(dat)
n <- n_rows / n_chunks
idx_list <- split(seq_len(nrow(dat)),
ceiling(seq_along(seq_len(nrow(dat)))/n))
split_data <- function(data, n_chunks = 10) {
n_rows <- nrow(data)
n <- n_rows / n_chunks
idx_list <- split(seq_len(n_rows),
ceiling(seq_along(seq_len(n_rows))/n))
chunked <- vector("list", length = length(idx_list))
for (i in seq_along(idx_list)) {
chunked[[i]] <- data[idx_list[[i]], , drop = FALSE]
}
return(chunked)
}
dat <- dat %>%
map(split_data)
dat
group_labels  <- tryCatch(lavaan::lavInspect(fit3, "group.label"), error = function(e) NULL)
out <- vector("list", length = length(group_labels)) %>%
set_names(group_labels)
for (group in group_labels) {
chunks <- dat[[group]]
padding <- dummy[[group]]
for (i in seq_along(chunks)) {
out[[group]][[i]] <- bind_rows(padding, chunks[[i]])
}
}
out
out <- vector("list", length = length(group_labels)) %>%
set_names(group_labels)
for (group in group_labels) {
chunks <- dat[[group]]
padding <- dummy[[group]]
for (i in seq_along(chunks)) {
out[[group]][[i]] <- bind_rows(padding, chunks[[i]])
out[[group]][[i]][["group_var"]] <- group
}
}
out
out <- vector("list", length = length(group_labels)) %>%
set_names(group_labels)
for (group in group_labels) {
chunks <- dat[[group]]
padding <- dummy[[group]]
for (i in seq_along(chunks)) {
out[[group]][[i]] <- bind_rows(padding, chunks[[i]])
out[[group]][[i]][[group_var]] <- group
}
}
out
chunked <- vector("list", length = length(group_labels)) %>%
set_names(group_labels)
chunked <- vector("list", length = length(group_labels)) %>%
set_names(group_labels)
for (group in group_labels) {
chunks <- dat[[group]]
padding <- dummy[[group]]
for (i in seq_along(chunks)) {
chunked[[group]][[i]] <- bind_rows(padding, chunks[[i]])
chunked[[group]][[i]][[group_var]] <- group
}
}
chunked
out
chunked
out <- chunked %>%
future_map(~lavPredict(fit3, newdata = .x,
append.data = TRUE))
chunked
chunked
chunked %>%
lift()
?lift
chunked %>%
map(
~map(~lavPredict(fit3, newdata = .x,
append.data = TRUE))
)
map(chunked,
~map(
~lavPredict(fit3,
newdata = .x,
append.data = TRUE)
))
map(chunked,
~map(
.x,
~lavPredict(fit3,
newdata = .x,
append.data = TRUE)
))
chunked
?lav_data_full
??lav_data_full
# 2) Split data into chunks (by rows) — or by groups for multi-group models
group_var  <- tryCatch(lavaan::lavInspect(fit3, "group"), error = function(e) NULL)
ov_ord <- lavNames(fit3, "ov.ord")
dat <- lavInspect(fit3, "data") %>%
map(as_tibble)
dat
dummy <- dat %>%
map(
~(.x %>%
select(all_of(ov_ord)) %>%
future_map(unique_valid) %>%
bind_cols() %>%
tidyr::fill(everything(), .direction = "downup"))
)
dummy
n_chunks <- 10
ov_ord <- lavNames(fit1, "ov.ord")
n_rows <- nrow(dat)
n <- n_rows / n_chunks
split_data <- function(data, n_chunks = 10) {
n_rows <- nrow(data)
n <- n_rows / n_chunks
idx_list <- split(seq_len(n_rows),
ceiling(seq_along(seq_len(n_rows))/n))
chunked <- vector("list", length = length(idx_list))
for (i in seq_along(idx_list)) {
chunked[[i]] <- data[idx_list[[i]], , drop = FALSE]
}
return(chunked)
}
dat <- dat %>%
map(split_data)
dat
group_labels  <- tryCatch(lavaan::lavInspect(fit3, "group.label"), error = function(e) NULL)
chunked <- vector("list", length = length(group_labels)) %>%
set_names(group_labels)
for (group in group_labels) {
chunks <- dat[[group]]
padding <- dummy[[group]]
for (i in seq_along(chunks)) {
chunked[[group]][[i]] <- bind_rows(padding, chunks[[i]])
chunked[[group]][[i]][[group_var]] <- group
}
}
chunked
# 2) Split data into chunks (by rows) — or by groups for multi-group models
group_var  <- tryCatch(lavaan::lavInspect(fit3, "group"), error = function(e) NULL)
ov_ord <- lavNames(fit3, "ov.ord")
dat <- lavInspect(fit3, "data") %>%
map(as_tibble)
dat
dummy <- dat %>%
map(
~(.x %>%
select(all_of(ov_ord)) %>%
future_map(unique_valid) %>%
bind_cols() %>%
tidyr::fill(everything(), .direction = "downup"))
)
n_chunks <- 10
ov_ord <- lavNames(fit1, "ov.ord")
n_rows <- nrow(dat)
n <- n_rows / n_chunks
split_data <- function(data, n_chunks = 10) {
n_rows <- nrow(data)
n <- n_rows / n_chunks
idx_list <- split(seq_len(n_rows),
ceiling(seq_along(seq_len(n_rows))/n))
chunked <- vector("list", length = length(idx_list))
for (i in seq_along(idx_list)) {
chunked[[i]] <- data[idx_list[[i]], , drop = FALSE]
}
return(chunked)
}
dat <- dat %>%
map(split_data)
dat
dummy
group_labels_rev <- rev(group_labels)
group_labels_rev
group_labels
dummy
dat
dummy
dummy <- dat %>%
map(
~(.x %>%
select(all_of(ov_ord)) %>%
future_map(unique_valid) %>%
bind_cols() %>%
tidyr::fill(everything(), .direction = "downup") %>%
mutate(
.data[[group_var]] = group_labels
group_var
dummy <- dat %>%
map(
~(.x %>%
select(all_of(ov_ord)) %>%
future_map(unique_valid) %>%
bind_cols() %>%
tidyr::fill(everything(), .direction = "downup") %>%
mutate(
.data[[group_var]] := group_labels
))
)
group_labels
unique_valid
dat
dummy <- dat %>%
dummy <- dat %>%
map(
~(.x %>%
select(all_of(ov_ord)) %>%
future_map(unique_valid) %>%
bind_cols() %>%
tidyr::fill(everything(), .direction = "downup")
))
dummy <- dat %>%
map(
~(.x %>%
select(all_of(ov_ord)) %>%
future_map(unique_valid) %>%
bind_cols() %>%
tidyr::fill(everything(), .direction = "downup")
))
dat <- lavInspect(fit3, "data") %>%
map(as_tibble)
dat
group_labels  <- tryCatch(lavaan::lavInspect(fit3, "group.label"), error = function(e) NULL)
dummy <- dat %>%
map(
~(.x %>%
select(all_of(ov_ord)) %>%
future_map(unique_valid) %>%
bind_cols() %>%
tidyr::fill(everything(), .direction = "downup")
))
dat
dummy <- dat %>%
map(
~(.x %>%
future_map(unique_valid) %>%
bind_cols() %>%
tidyr::fill(everything(), .direction = "downup")
))
dummy
dat
unique_valid
dat[[1]]
dat[[1]] %>%
unique_valid()
dat[[1]] %>%
map(unique_valid)
dummy <- dat %>%
map(
~(.x %>%
future_map(unique_valid) %>%
bind_cols() %>%
mutate(.data[[group_var]] = 1) %>%
group_var
dummy <- dat %>%
map(
~(.x %>%
future_map(unique_valid) %>%
bind_cols() %>%
tidyr::fill(everything(), .direction = "downup")
))
dummy
dat
dummy
