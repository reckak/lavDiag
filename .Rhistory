.prepare_ordinal(fit2)
load_all()
.prepare_ordinal(fit2)
load_all()
.prepare_ordinal(fit2)
load_all()
.prepare_continuous(fit2)
.prepare_ordinal(fit2)
.prepare_continuous(fit3)
.prepare_ordinal(fit3)
.prepare_continuous(fit2)
.prepare_ordinal(fit2)
fit3 <- lavaan::cfa(model = m,
data = df,
meanstructure = T,
missing = "pairwise",
group = "gender",
ordered = ord)
.prepare_continuous(fit3)
.prepare_ordinal(fit3)
check()
document()
check_built()
check()
check()
use_test("augment")
load_all()
check()
load_all()
hopper_plot(fit2)
load_all()
hopper_plot(fit2)
rlang::last_trace()
load_all()
hopper_plot(fit2)
load_all()
hopper_plot(fit2)
load_all()
hopper_plot(fit2)
load_all()
hopper_plot(fit2)
load_all()
hopper_plot(fit2)
rlang::last_trace()
load_all()
hopper_plot(fit3)
hopper_plot(fit2)
loa\
load_all()
hopper_plot(fit2)
load_all()
hopper_plot(fit2)
load_all()
hopper_plot(fit2)
load_all()
hopper_plot(fit2)
load_all()
load_all()
hopper_plot(fit2)
load_all()
hopper_plot(fit2)
load_all()
hopper_plot(fit2)
load_all()
hopper_plot(fit2)
lop
load_all()
hopper_plot(fit2)
load_all()
hopper_plot(fit2)
load_all()
hopper_plot(fit2)
hopper_plot(fit3)
check()
sg1 <- item_data(fit2) # single group model
sg2 <- item_data(fit3) # single group model
item_plot(sg1, latent = "E",
sort = "r2",
jitter_seed = 333)
item_plot(sg1, latent = "A",
sort = "r2",
jitter_seed = 333)
item_plot(sg2, latent = "E",
sort = "r2",
jitter_seed = 333)
item_plot(sg2, latent = "A",
sort = "r2",
jitter_seed = 333)
hopper_plot(fit2)
hopper_plot(fit3)
?ggplot2::expand_limits
load_all()
hopper_plot(fit2)
hopper_plot(fit3)
load_all()
hopper_plot(fit2)
hopper_plot(fit3)
load_all()
check()
load_all()
check()
load_all()
check()
check()
check()
sg1 <- item_data(fit2) # single group model
sg2 <- item_data(fit3) # single group model
item_plot(sg1, latent = "E",
sort = "r2",
jitter_seed = 333)
item_plot(sg1, latent = "A",
sort = "r2",
jitter_seed = 333)
item_plot(sg2, latent = "E",
sort = "r2",
jitter_seed = 333)
item_plot(sg2, latent = "A",
sort = "r2",
jitter_seed = 333)
fit2 <- lavaan::cfa(model = m,
data = df,
missing = "pairwise",
# group = "gender",
meanstructure = T,
ordered = T)
fit3 <- lavaan::cfa(model = m,
data = df,
meanstructure = T,
missing = "pairwise",
group = "gender",
ordered = T)
lavPredict_parallel(fit2)
fit2 <- lavaan::cfa(model = m,
data = df,
missing = "pairwise",
# group = "gender",
meanstructure = T,
ordered = F)
fit3 <- lavaan::cfa(model = m,
data = df,
meanstructure = T,
missing = "pairwise",
group = "gender",
ordered = F)
lavPredict_parallel(fit2)
lavPredict_parallel(fit3)
lavPredict_parallel(fit2, return_type = "list")
?lavPredict_parallel
fit2 <- lavaan::cfa(model = m,
data = df,
missing = "pairwise",
# group = "gender",
meanstructure = T,
ordered = T)
fit3 <- lavaan::cfa(model = m,
data = df,
meanstructure = T,
missing = "pairwise",
group = "gender",
ordered = T)
lavPredict_parallel(fit2, return_type = "list")
lavPredict_parallel(fit3, return_type = "list")
lavPredict_parallel(fit3, return_type = "data")
lavPredict_parallel(fit2)
lavPredict_parallel(fit3)
fit2 <- lavaan::cfa(model = m,
data = df,
missing = "pairwise",
# group = "gender",
meanstructure = T,
ordered = F)
fit3 <- lavaan::cfa(model = m,
data = df,
meanstructure = T,
missing = "pairwise",
group = "gender",
ordered = F)
lavPredict_parallel(fit2)
lavPredict_parallel(fit3)
lavPredict_parallel(fit2)
lavPredict_parallel(fit3)
fit2 <- lavaan::cfa(model = m,
data = df,
missing = "pairwise",
# group = "gender",
meanstructure = T,
ordered = T)
fit3 <- lavaan::cfa(model = m,
data = df,
meanstructure = T,
missing = "pairwise",
group = "gender",
ordered = T)
lavPredict_parallel(fit2)
lavPredict_parallel(fit3)
model_info(fit2)
model_info(fit3)
lavaan::lavInspect(fit, "case.idx")
lavaan::lavInspect(fit2, "case.idx")
lavaan::lavInspect(fit3, "case.idx")
lavaan::lavPredict(fit2)
fit2 <- lavaan::cfa(model = m,
data = df,
missing = "pairwise",
# group = "gender",
meanstructure = T,
ordered = F)
fit3 <- lavaan::cfa(model = m,
data = df,
meanstructure = T,
missing = "pairwise",
group = "gender",
ordered = F)
lavaan::lavPredict(fit2)
?lavaan::lavPredict
lavaan::lavPredict(fit2, append.data = TRUE)
lavaan::lavPredict(fit2, append.data = TRUE, drop.list.single.group = FALSE)
lavaan::lavPredict(fit2, append.data = TRUE, drop.list.single.group = FALSE)
lavaan::lavPredict(fit3, append.data = TRUE, drop.list.single.group = FALSE)
fit1 <- lavaan::cfa(model = m,
data = df,
missing = "pairwise",
# group = "gender",
meanstructure = T,
ordered = F)
fit2 <- lavaan::cfa(model = m,
data = df,
meanstructure = T,
missing = "pairwise",
group = "gender",
ordered = F)
check()
check()
check()
check()
check()
# single group
plot_cfa(fit1)
# single group
plot_cfa(fit3)
library(devtools)
load_all()
df <- psych::bfi %>%
dplyr::mutate(gender = factor(gender,
labels = c("Males", "Females")))
m <- "
A =~ A1 + A2 + A3 + A4 + A5
E =~ E1 + E2 + E3 + E4 + E5
"
ord <- c("E1", "E2", "E3", "E4", "E5")
fit1 <- lavaan::cfa(model = m,
data = df,
missing = "pairwise",
# group = "gender",
meanstructure = T,
ordered = ord)
fit2 <- lavaan::cfa(model = m,
data = df,
meanstructure = T,
missing = "pairwise",
group = "gender",
ordered = ord)
sg1 <- item_data(fit1) # single group model
item_plot(sg1, latent = "E",
sort = "r2",
jitter_seed = 333)
item_plot(sg1, latent = "A",
sort = "r2",
jitter_seed = 333)
.fit_mixed(n = 100)
check()
.fit_mixed_mg(n = 200)
.fit_ord(n = 80)
.fit_mixed(n = 100)
.fit_ord(n = 100)
.fit_mixed
.fit_mixed(n = 500, n_cat = 4)
load_all()
.fit_mixed(n = 500, n_cat = 4)
.fit_mixed(n = 500, n_cat = 4, thr = 3)
load_all()
.fit_mixed(n = 500, n_cat = 4, thr = 3)
.fit_mixed(n = 500, n_cat = 4, thr = c(-1, 0, 1))
.fit_mixed(n = 100, n_cat = 4, thr = c(-1, 0, 1))
fit <- .fit_mixed(n = 500, n_cat = 4, thr = c(-1, 0, 1))  # mixed gives both branches to exercise code paths
res <- item_data(fit, store_fits = FALSE, progress = FALSE, verbose = FALSE)
fit <- .fit_mixed(n = 500, n_cat = 4, thr = c(-1, 0, 1))  # mixed gives both branches to exercise code paths
res <- item_data(fit, store_fits = FALSE)
res
check()
prepare
args(prepare)
resid_qq(.fit_mixed(n = 100), n = 5)
.fit_mixed(n = 100)
resid_qq(fit1)
resid_cor(fit1)
args(resid_cor)
resid_cor(fit1, "cor.bentler")
resid_cor(fit1, type = "cor.bentler")
fit1 <- lavaan::cfa(model = m,
data = df,
missing = "pairwise",
# group = "gender",
meanstructure = T,
ordered = T)
resid_cor(fit1, type = "cor.bentler")
lavResiduals(fit1)
lavaan::lavResiduals(fit1)
fit1 <- lavaan::cfa(model = m,
data = df,
missing = "pairwise",
# group = "gender",
meanstructure = T,
ordered = ord)
lavaan::lavResiduals(fit1)
.fit_cont(n = 60),
.fit_cont(n = 60)
resid_qq(.fit_ord(n = 200), n = 5, title = "QQ by group")
resid_qq(.fit_cont(n = 100), n = 5)
check()
args(lavPredict_parallel)
model_info(fit1)
is.null(char(0))
is.null(character(0))
character(0)
length(character(0))
isTRUE(length(character(0)))
isTRUE(character(0)
isTRUE(FALSE)
isTRUE(FALSE)
length(ov_ord)
length(character(0))
isTRUE(length(character(0)))
check()
load_all()
resid_cor(fit1)
resid_cor(fit1, type = "cor.bentler")
load_all()
resid_cor(fit1)
load_all()
resid_cor(fit1)
fit1 <- lavaan::cfa(model = m,
data = df,
missing = "pairwise",
# group = "gender",
meanstructure = T,
ordered = T)
resid_cor(fit1)
fit1 <- lavaan::cfa(model = m,
data = df,
missing = "pairwise",
# group = "gender",
meanstructure = T,
ordered = F)
resid_cor(fit1)
lavaan::lavResiduals(fit1)
load_all()
resid_cor(fit1)
resid_cor(fit1, type = "cor.bentler")
check()
resid_cor(fit2)
document()
check()
# install.packages("remotes")
remotes::install_github("reckak/lavDiag")
# install.packages("remotes")
remotes::install_github("reckak/lavDiag")
remotes::install_github("reckak/lavDiag")
remotes::install_github("reckak/lavDiag")
devtools::check_rhub()
checkCRAN()
devtools::check_rhub()
?devtools::check_rhub()
rhub::rhub_check(platforms = "cran")
system("git --version")
usethis::use_git_config(user.name = "Karel Rečka", user.email = "reckak@muni.cz")
usethis::create_github_token( # otevře prohlížeč na GitHubu
scopes = c("repo","workflow","gist"),
description = "lavDiag-CRAN"
)
gitcreds::gitcreds_set(url = "https://github.com")
gitcreds::gitcreds_set(url = "https://github.com")
gitcreds::gitcreds_set(url = "https://github.com")
gitcreds::gitcreds_set(url = "https://github.com")
system("git --version")
usethis::use_git_config(user.name = "Karel Rečka", user.email = "reckak@muni.cz")
gitcreds::gitcreds_set(url = "https://github.com")
gh::gh_whoami()
usethis::git_sitrep()
usethis::create_github_token(
scopes = c("repo","workflow","gist","user:email"),
description = "lavDiag-CRAN"
)
gitcreds::gitcreds_set(url = "https://github.com")
gh::gh_whoami()
usethis::git_sitrep()
usethis::use_git_config(user.name = "Karel Rečka", user.email = "361104@muni.cz")
usethis::git_sitrep()
usethis::use_git_config(user.name = "Karel Rečka", user.email = "361104@mail.muni.cz")
usethis::git_sitrep()
rhub::rhub_check(platforms = "cran")
rhub::rhub_platforms()
rhub::rhub_check(platforms = "windows-release")
rhub::rhub_platforms()
rhub::rhub_check(platforms = "windows")
rhub::rhub_check(platforms = "cran")
rhub::rhub_setup()
rhub::rhub_check(platforms = "windows")
rhub::rhub_doctor()
rhub::rhub_check()
fs::file_exists(".github/workflows/rhub.yaml")
rhub::rhub_doctor()
rhub::rhub_check()
?devtools::release()
devtools::release()
spell_check()
?`spell_check()
?`spell_check()
help(spell_check)
library(devtools)
spell_check()
spell_check()
spell_check()
document()
spell_check()
spell_check()
devtools::release()
check_win_devel()
sd
check_win_devel()
devtools::release()
?check_win_devel()
?release()
use_release_issue()
install.packages("tinytex")
system("pdflatex --version")
tinytex::install_tinytex()
tinytex::is_tinytex()
system("pdflatex --version")
system("pdflatex --version")
check_win_devel()
library(devtools)
check_win_devel()
pdflatex not found! Not building PDF manual.
library(devtools)
check_win_devel()
install.packages("installr")
installr::install.MikTeX()
devtools::check_win_release()
tinytex::check_installed()
tinytex::install_tinytex()
?tinytex::install_tinytex()
file.info(tinytex:::win_app_dir('TinyTeX', 'bin', 'win32', 'pdflatex.exe'))
file.info(tinytex:::win_app_dir('TinyTeX', 'bin', 'win32', 'pdflatex.exe'))
file.info(tinytex:::win_app_dir('TinyTeX', 'bin', 'win32', 'pdflatex.exe'))
file.info(tinytex:::win_app_dir('TinyTeX', 'bin', 'win32', 'pdflatex.exe'))
file.info(tinytex:::win_app_dir('TinyTeX', 'bin', 'win32', 'pdflatex.exe'))
tinytex:::win_app_dir
?tinytex:::win_app_dir
tinytex:::win_app_dir
tinytex::check_installed()
tinytex::check_installed("tinytex")
library(devtools)
usethis::git_sitrep()
?check_win_devel()
check_win_devel()
check_win_devel()
check_win_devel(2)
check_win_devel()
library(devtools)
system("pdflatex --version")
library(devtools)
check_win_release()
check_win_release(email = "karelrecka@gmail.com")
library(devtools)
check_win_release(email = "karelrecka@gmail.com")
library()
library(devtools)
check()
system('grep -RIPn "\\xE2\\x88\\x92" R man inst vignettes || true')
system('grep -RIPn "\\xE2\\x88\\x92" R man inst vignettes || true')
system('grep -RIPn "\\xE2\\x88\\x92" R man inst vignettes || true')
check()
system('grep -RIPn "\\xE2\\x88\\x92" R man inst vignettes || true')
system('grep -RIPn "\\xE2\\x88\\x92" R man inst vignettes || true')
document()
system('grep -RIPn "\\xE2\\x88\\x92" R man inst vignettes || true')
system('grep -RIPn "\\xE2\\x88\\x92" R man inst vignettes || true')
usethis::use_spell_check()
spell_check()
spell_check()
spell_check()
document()
spell_check()
spell_check()
usethis::use_spell_check()
usethis::use_spell_check()
check_win_devel()
system('grep -RIPn "\\xE2\\x88\\x92" R man inst vignettes || true')
check()
library(devtools)
check()
devtools::release()
devtools::release()
news()
usethis::use_news_md()
release()
usethis::use_cran_comments()
check()
gh::gh_whoami()
rhub::rhub_check()
check_win_release()
